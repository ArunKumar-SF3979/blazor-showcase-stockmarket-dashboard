@namespace StockMarket.Pages
@inject CardService CardService
@inject WatchListService WatchListService
@inject ChartService ChartService
@inherits ComponentBase
@inject NavigationManager NavigationManager

<div id="target">
    <div>
        <SfAppBar ColorMode="AppBarColor.Inherit">
            <span class="e-avatar e-avatar-circle custom-avatar">
                <img src=@CardService.StockCardDetails.StockSymbol alt="stock_icon">
            </span>
            <span class="stock-name span-padding">@CardService.StockCardDetails.StockName</span>
            <span class="symbol-name">@CardService.StockCardDetails.StockSubName</span>
            <AppBarSpacer></AppBarSpacer>
            @{
                if (CardService.StockCardDetails.UpDownPrice > 0)
                {
                    UpDownStockPricePercntage = "+" + CardService.StockCardDetails.UpDownPrice.ToString() + "%";
                }
                else
                {
                    UpDownStockPricePercntage = CardService.StockCardDetails.UpDownPrice.ToString() + "%";
                }
            }
            <SfChip>
                <SfChip>
                    <ChipItems>
                        <ChipItem Text="@UpDownStockPricePercntage" CssClass=@GetChipColorClass() TrailingIconCss="@GetTrailingIconClass()"></ChipItem>
                    </ChipItems>
                </SfChip>
            </SfChip>
            <span class="stock-name span-padding">$@CardService.StockCardDetails.StockCurrentPrice</span>
            <span class="symbol-name">@CardService.StockCardDetails.LastUpdate</span>
        </SfAppBar>
    </div>
    <div class="@Stockheader">
        <SfAppBar ColorMode="AppBarColor.Inherit">
            <span class="e-avatar e-avatar-circle custom-avatar">
                <img src=@CardService.StockCard.StockSymbol alt="stock_icon">
            </span>
            <span class="stock-name span-padding">@CardService.StockCard.StockName</span>
            <span class="symbol-name">@CardService.StockCard.StockSubName</span>
            <span class="remove-btn">
                <SfChip>
                    <ChipItems>
                        <ChipItem @onclick="RemoveStock" Text="X Remove" CssClass="chip-compare-text"></ChipItem>
                    </ChipItems>
                </SfChip>
            </span>
            <AppBarSpacer></AppBarSpacer>
            @{
                if (CardService.StockCard.UpDownPrice > 0)
                {
                    StockPricePercntage = "+" + CardService.StockCard.UpDownPrice.ToString() + "%";
                }
                else
                {
                    StockPricePercntage = CardService.StockCard.UpDownPrice.ToString() + "%";
                }
                SeriesChange = CardService.StockCardDetails.SeriesChange.ToString() + "%";
            }
            <SfChip>
                <ChipItems>
                    <ChipItem Text="@SeriesChange" CssClass="e-warning"></ChipItem>
                    <ChipItem Text="@StockPricePercntage" CssClass=@GetChipColorClass2() TrailingIconCss="@GetTrailingIconClass2()"></ChipItem>
                </ChipItems>
            </SfChip>
            <span class="stock-name span-padding">$@CardService.StockCard.StockCurrentPrice</span>
            <span class="symbol-name">@CardService.StockCard.LastUpdate</span>
        </SfAppBar>
    </div>
    <div>
        <div>
            <SfChip>
                <ChipItems>
                    <ChipItem @onclick="OpenDialog" Text="+ Compare" CssClass="chip-compare-text"></ChipItem>
                </ChipItems>
            </SfChip>
        </div>
        <SfDialog Target="#target" Height="480px" Width="640px" ShowCloseIcon="true" @bind-Visible="Visibility" IsModal="true">
            <DialogTemplates>
                <Header> Compare Stocks </Header>
                <Content>
                    <div>
                        <input class="search" type="text" placeholder="Search" @oninput="UpdateFilteredItems">
                    </div>
                    <CascadingValue Value="this">
                        <SfListView DataSource="@CardDatas">
                            <ListViewFieldSettings TValue="CardData" Text="StockName"></ListViewFieldSettings>
                            <ListViewTemplates TValue="CardData">
                                <Template>
                                    <DialogStockComponent Context="@context"></DialogStockComponent>
                                </Template>
                            </ListViewTemplates>
                        </SfListView>
                    </CascadingValue>
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Compare" IsPrimary="true" OnClick="@CompareStock" />
            </DialogButtons>
        </SfDialog>
    </div>
    <div class="@ChartClass">
        @if (IsStockAdded)
        {
            <SfStockChart @ref="sfStockChart" Height="100%" ID="stockchart" Theme=Syncfusion.Blazor.Theme.Tailwind EnableSelector="true" EnablePeriodSelector="true" EnableCustomRange="true" TrendlineType="@TrendlineType" SeriesType="@SeriesType">
                <StockChartSeriesCollection>
                    <StockChartSeries BullFillColor="#3730A3" Fill="#6528F7" BearFillColor="#E11D48" EnableSolidCandles="true" DataSource="@ChartDatas" Type="ChartSeriesType.Candle" XName="X" High="High" Low="Low" Open="Open" Close="Close" Volume="Volume">
                        <StockChartSeriesBorder Color="#111827" Width="0.5"></StockChartSeriesBorder>
                    </StockChartSeries>
                    <StockChartSeries DataSource="@ChartDatas" Fill="#FFB400" Type="ChartSeriesType.Spline" XName="X" High="High" Low="Low" Open="Open" Close="Close" Volume="Volume">                      
                    </StockChartSeries>
                </StockChartSeriesCollection>
                <StockChartPrimaryYAxis OpposedPosition="false" Interval="10" LabelPosition="AxisPosition.Outside" LabelFormat="C2">
                    <StockChartAxisLineStyle Width="0" Color="transparent"></StockChartAxisLineStyle>
                    <StockChartAxisMajorTickLines Width="0"></StockChartAxisMajorTickLines>
                    <StockChartAxisMinorTickLines Width="0"></StockChartAxisMinorTickLines>
                </StockChartPrimaryYAxis>
                <StockChartPrimaryXAxis>
                    <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines>
                    <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
                </StockChartPrimaryXAxis>
                <StockChartChartArea>
                    <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
                </StockChartChartArea>
                <StockChartChartBorder Width="0"></StockChartChartBorder>
                <StockChartZoomSettings ToolbarItems=@toolbarItems EnableMouseWheelZooming="true" EnablePan="false"></StockChartZoomSettings>
                <StockChartTooltipSettings Header="" Enable="true" Shared="true" TooltipPosition="TooltipPosition.Nearest"></StockChartTooltipSettings>
                <StockChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></StockChartCrosshairSettings>
            </SfStockChart>
        }
        else
        {
            <SfStockChart @ref="sfStockChart" Height="100%" ID="stockchart" Theme=Syncfusion.Blazor.Theme.Tailwind EnableSelector="true" EnablePeriodSelector="true" EnableCustomRange="true" TrendlineType="@TrendlineType" SeriesType="@SeriesType">
                <StockChartSeriesCollection>
                    <StockChartSeries BullFillColor="#3730A3" Fill="#6528F7" BearFillColor="#E11D48" EnableSolidCandles="true" DataSource="@ChartDatas" Type="ChartSeriesType.Candle" XName="X" High="High" Low="Low" Open="Open" Close="Close" Volume="Volume">
                        <StockChartSeriesBorder Color="#111827" Width="0.5"></StockChartSeriesBorder>
                    </StockChartSeries>
                </StockChartSeriesCollection>
                <StockChartPrimaryYAxis OpposedPosition="false" Interval="10" LabelPosition="AxisPosition.Outside" LabelFormat="C2">
                    <StockChartAxisLineStyle Width="0" Color="transparent"></StockChartAxisLineStyle>
                    <StockChartAxisMajorTickLines Width="0"></StockChartAxisMajorTickLines>
                    <StockChartAxisMinorTickLines Width="0"></StockChartAxisMinorTickLines>
                </StockChartPrimaryYAxis>
                <StockChartPrimaryXAxis>
                    <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines>
                    <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
                </StockChartPrimaryXAxis>
                <StockChartChartArea>
                    <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
                </StockChartChartArea>
                <StockChartChartBorder Width="0"></StockChartChartBorder>
                <StockChartZoomSettings ToolbarItems=@toolbarItems EnableMouseWheelZooming="true" EnablePan="false"></StockChartZoomSettings>
                <StockChartTooltipSettings Header="" Enable="true" Shared="true" TooltipPosition="TooltipPosition.Nearest"></StockChartTooltipSettings>
                <StockChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></StockChartCrosshairSettings>
            </SfStockChart>
        }
    </div>
</div>

<style>
    div[id*="_selector_Secondary_Element"] {
        transform: translate(0px, -4px) !important;
    }
</style>

@code{
    List<Syncfusion.Blazor.Charts.ToolbarItems> toolbarItems = new List<Syncfusion.Blazor.Charts.ToolbarItems>() { };
    private string chipText = "0.00%";

    private string UpDownStockPricePercntage { get; set; } = string.Empty;

    private string StockPricePercntage { get; set; } = string.Empty;

    private string SeriesChange { get; set; } = string.Empty;

    private SfStockChart sfStockChart;

    private bool IsStockAdded = false;

    private string Stockheader = "remove-stock";

    private string ChartClass = "chart-common";

    private string searchTerm = "";

    private bool Visibility { get; set; } = false;

    private void OpenDialog()
    {
        this.Visibility = true;
    }

    public void UpdateFilteredItems(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        CardDatas = string.IsNullOrEmpty(searchTerm) ? CardData.Values.SelectMany(x => x).ToList() : CardDatas.Where(card => card.StockName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    public string GetChipColorClass()
    {
        return GetClass(CardService.StockCardDetails.UpDownPrice.ToString());
    }

    public string GetTrailingIconClass()
    {
        return GetClass2(CardService.StockCardDetails.UpDownPrice.ToString());
    }

    public string GetChipColorClass2()
    {
        return GetClass(CardService.StockCard.UpDownPrice.ToString());
    } 

    public string GetTrailingIconClass2()
    {
        return GetClass2(CardService.StockCard.UpDownPrice.ToString());
    }

    public string GetClass(string chipText)
    {
        decimal numericValue = decimal.Parse(chipText.Trim('%'));
        return (numericValue >= 0) ? "e-success" : "e-danger";
    }

    public string GetClass2(string chipText)
    {
        decimal numericValue = decimal.Parse(chipText.Trim('%'));
        return (numericValue >= 0) ? "e-icons e-arrow-up" : "e-icons e-arrow-down";
    }

    public void ChartRefresh()
    {
        ChartDatas = ChartService.GenerateSimulatedStockData();
        sfStockChart?.Refresh();
        StateHasChanged();
    }

    public void Selected(CardData selectedCardData)
    {
        CardService.StockCard = selectedCardData;
        Stockheader = "add-stock";
        ChartClass = "chart-after-compare";
        IsStockAdded = true;
    }

    public void CompareStock()
    {
        sfStockChart?.Refresh();
        StateHasChanged();
    }


    private void RemoveStock()
    {
        Stockheader = "remove-stock";
        ChartClass = "chart-common";
        IsStockAdded = false;
        sfStockChart?.Refresh();
        StateHasChanged();
    }
}
